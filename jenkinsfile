pipeline {
    agent any

    environment {
        SONAR_PROJECT_KEY = 'FadwaLacham_scolarite'
        SONAR_ORGANIZATION = 'fadwalacham'
        SONAR_TOKEN = credentials('sonarcloud-token')
    }

    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/FadwaLacham/scolarite.git'
            }
        }

       stage('Secret Scanning') {
            steps {
                // Exécution de Gitleaks pour la détection des secrets dans le code source
                bat 'gitleaks detect --source . --report-format json --report-path gitleaks-report.json'
            }
        }

        stage('Analyze Secrets Report') {
            steps {
                script {
                    def report = readFile('gitleaks-report.json')
                    if (report.contains('leak')) {
                        error 'Secrets détectés ! Le build est arrêté.'
                    }
                }
            }
        }

        stage('SCA with Dependency-Check') {
            steps {
                echo 'Analyse de la composition des sources avec OWASP Dependency-Check...'
                bat '"C:\\dependency-check\\bin\\dependency-check.bat" --project "demo" --scan . --format HTML --out dependency-check-report.html --nvdApiKey 181c8fc5-2ddc-4d15-99bf-764fff8d50dc --disableAsse'
            }
        }

stage('ZAP Security Scan') {
    steps {
        script {
            // URL de l'application à scanner
            def appUrl = 'https://ed3a-105-73-96-62.ngrok-free.app'

            // Lancer le scan du spider avec ZAP
            bat """
            curl "http://localhost:8095/JSON/spider/action/scan/?url=${appUrl}&recurse=true"
            timeout /t 60 /nobreak
            """

            // Lancer l'active scan après que le spider soit terminé
            bat """
            curl "http://localhost:8095/JSON/ascan/action/scan/?url=${appUrl}&recurse=true"
            timeout /t 300 /nobreak
            """
        }
    }

    post {
        always {
            // Télécharger le rapport HTML de ZAP
            bat 'curl "http://localhost:8095/OTHER/core/other/htmlreport/" > zap_report1.html'
        }
    }
}


        stage('Build') {
            steps {
                bat 'mvn clean install'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarCloud') {
                    bat """
                    mvn sonar:sonar ^
                      -Dsonar.projectKey=%SONAR_PROJECT_KEY% ^
                      -Dsonar.organization=%SONAR_ORGANIZATION% ^
                      -Dsonar.host.url=https://sonarcloud.io ^
                      -Dsonar.login=%SONAR_TOKEN%
                    """
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    timeout(time: 5, unit: 'MINUTES') {
                        waitForQualityGate abortPipeline: true
                    }
                }
            }
        }
    }
}
